{"version":3,"sources":["webpack:///./src/framework/chaos-monkey/index.js","webpack:///./src/framework/peer/index.js"],"names":["config","CHAOS_MONKEY_STRENGTH","init","strength","Math","floor","random","spec","i","sum","r","Peer","require","LifeRaft","md5","RAFT_ENABLED","ETHEREUM_ENABLED","DATA_RELAYER_ENABLED","CHAOS_MONKEY_ENABLED","DARKLAUNCH","NODE_OPERATORS","local","raft","peer","connectedPeers","connectingPeers","peerId","requests","pendingData","peerHost","peerPort","peerKey","ID","toString","substr","getPeer","open","peerConnect","resolve","sendCommand","key","data","responseId","cb","cmd","requestId","console","log","peers","warn","send","pageContentValidationRequest","path","content","hashedContent","hash","packet","message","FOLLOWER","pageContentDataRequest","params","dataRelayer","addressBalanceRequest","address","balance","runCommand","meta","document","getElementById","innerHTML","client","emit","initClient","on","call","length","JSON","parse","leave","err","connect","label","serialization","metadata","join","fetchPeers","req","XMLHttpRequest","onload","result","response","monitorPeers","check","setTimeout","ChaosMonkey","host","port","secure","debug","allow_discovery","logFunction","copy","Array","prototype","slice","arguments","disconnect","reconnect","id","window","onunload","onbeforeunload","e","destroyed","destroy"],"mappings":"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","file":"static/js/53.c6547fda66d7b77448c1.js","sourcesContent":["\nlet config = {\n    CHAOS_MONKEY_STRENGTH: null\n}\n\nexport const init = function (strength) {\n    config.CHAOS_MONKEY_STRENGTH = strength\n\n    if (!config.CHAOS_MONKEY_STRENGTH) {\n        config.CHAOS_MONKEY_STRENGTH = Math.floor(Math.random() * 10)\n    }\n\n}\n\nexport const random = function () {\n    const spec = {\n        0: (10 - config.CHAOS_MONKEY_STRENGTH) / 100,\n        1: config.CHAOS_MONKEY_STRENGTH / 100\n    }\n\n    let i, sum = 0, r = Math.random()\n    for (i in spec) {\n        sum += spec[i];\n        if (r <= sum) return i ? true : false\n    }\n}","import * as ChaosMonkey from '../chaos-monkey'\nimport * as Ethereum from '../ethereum'\n\n\n// declare let require: any\n// declare let Promise: any\n// declare let window: any\n// declare let window: {\n//     web3: any;\n//     peer: any;\n//     pageContentDataRequest: any;\n//     addressBalanceRequest: any;\n//     peerConnect: any;\n//     onunload: any;\n//     config: any;\n//     onbeforeunload: any;\n// }\n\n\n// declare global {\n//     interface Window {\n//         web3: any;\n//         peer: any;\n//         pageContentDataRequest: any;\n//         addressBalanceRequest: any;\n//         peerConnect: any;\n//     }\n// }\n\n\nconst Peer = require('peerjs')\nconst LifeRaft = require('liferaft/index')\nconst md5 = require('js-md5')\n\nconst config = {\n    RAFT_ENABLED: true,\n    ETHEREUM_ENABLED: true,\n    DATA_RELAYER_ENABLED: true,\n    CHAOS_MONKEY_ENABLED: true,\n    CHAOS_MONKEY_STRENGTH: null,\n    DARKLAUNCH: {\n        NODE_OPERATORS: false\n    }\n}\n\nconst local = {\n    raft: null,\n    peer: null,\n    connectedPeers: {},\n    connectingPeers: {},\n    peerId: null,\n    requests: {},\n    pendingData: '',\n    peerHost: 'localhost',//'blockhub-peer-server.herokuapp.com',//'0.peerjs.com',\n    peerPort: 9000,//80,//9000,\n    peerKey: 'nodeOperator',\n}\n\n\nexport const ID = function () {\n    // Math.random should be unique because of its seeding algorithm.\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n    // after the decimal.\n    return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nexport const getPeer = async (peerId) => {\n    const peer = local.connectedPeers[peerId]\n\n    if (!peer.open) {\n        await peerConnect(peerId)\n\n        return new Promise((resolve) => {\n            resolve(peer)\n        })\n    }\n\n    Promise.resolve(peer)\n}\n\nexport const sendCommand = async (key, data = {}, peer = null, responseId = null, cb = null) => {\n    const cmd = {\n        key: key,\n        responseId: responseId,\n        requestId: ID(),\n        data: data\n    }\n\n    console.log('[PeerService] Sending command', cmd)\n\n    if (cb) {\n        local.requests[cmd.requestId] = cb\n    }\n\n    if (!peer) {\n        const peers = Object.keys(local.connectedPeers)\n        \n        peer = await getPeer(peers[0])\n    }\n\n    if (!peer) {\n        console.warn('[PeerService] Not connected to peer. This shouldnt happen.')\n    }\n\n    peer.send(JSON.stringify(cmd))\n}\n\nexport const pageContentValidationRequest = async (path, content, peer) => {\n    const hashedContent = md5(content)\n\n    const data = {\n        path: path\n    }\n\n    await sendCommand('pageContentValidationRequest', data, peer, null, (data) => {\n        console.log('Page content validation response', data.hash)\n\n        if (data.hash === hashedContent) {\n            console.log('Successful validation')\n        } else {\n            console.log('Failed validation')\n        }\n    })\n\n    if (config.RAFT_ENABLED) {\n        const packet = local.raft.packet('vote', data)\n\n        local.raft.message(LifeRaft.FOLLOWER, packet, () => {\n            console.log('[PeerService] Vote request sent', data)\n        })\n    }\n}\n\nexport const pageContentDataRequest = async (path, params) => {\n    const data = {\n        path: path\n    }\n\n    const peers = Object.keys(local.connectedPeers)\n    const peer = local.connectedPeers[peers[0]]\n\n    await sendCommand('pageContentDataRequest', data, null, null, (data) => {\n        console.log('Page content data response', data.content)\n\n        const peers = Object.keys(local.connectedPeers)\n        const dataRelayer = local.connectedPeers[peers[0]]\n\n        pageContentValidationRequest('/', data.content, dataRelayer)\n    })\n}\n\nexport const addressBalanceRequest = async (address) => {\n    if (config.ETHEREUM_ENABLED && config.DATA_RELAYER_ENABLED && Ethereum.isConnected()) {\n        const balance = await Ethereum.getUserBalance()\n\n        const data = {\n            balance\n        }\n\n        return Promise.resolve(data)\n    } else {\n        return new Promise(async (resolve) => {\n            const data = {\n                address\n            }\n\n            await sendCommand('addressBalanceRequest', data, null, null, (data) => {\n                resolve(data)\n            })\n        })\n    }\n}\n\nexport const runCommand = async (cmd, meta = null) => {\n    console.log('[PeerService] Running command', cmd.key)\n\n    if (cmd.responseId) {\n        if (local.requests[cmd.responseId]) {\n            console.log('[PeerService] Running response callback', cmd.responseId)\n\n            local.requests[cmd.responseId](cmd.data)\n\n            delete local.requests[cmd.responseId]\n        }\n\n        return\n    }\n\n    if (cmd.key === 'pageContentValidationRequest') {\n        const data = {\n            hash: md5(document.getElementById('main_navbar').innerHTML)\n        }\n\n        if (config.CHAOS_MONKEY_ENABLED && ChaosMonkey.random()) {\n            data.hash = 'chaos'\n        }\n\n        await sendCommand('pageContentValidationResponse', data, meta.client, cmd.requestId)\n    } else if (cmd.key === 'pageContentDataRequest') {\n        const data = {\n            content: document.getElementById('main_navbar').innerHTML\n        }\n\n        await sendCommand('pageContentDataResponse', data, meta.client, cmd.requestId)\n    } else if (cmd.key === 'raft') {\n        local.raft.emit('data', cmd.data, async (data) => {\n            console.log('[PeerService] Packet reply from ' + local.raft.address, data);\n\n            await sendCommand('raft', data, meta.client, cmd.requestId)\n        })\n    } else if (cmd.key === 'addressBalanceRequest') {\n        const data = await addressBalanceRequest(cmd.address)\n\n        await sendCommand('addressBalanceResponse', data, meta.client, cmd.requestId)\n    }\n}\n\nexport const initClient = (client) => {\n    let pendingData = ''\n\n    client.on('call', function (call) {\n        console.log('[PeerService] Received call', call)\n    })\n\n    client.on('data', function (data) {\n        console.log('[PeerService] Received data from', client.peer, data)\n\n        if (data[data.length - 1] === '}') {\n            const cmd = JSON.parse(pendingData + data)\n\n            pendingData = ''\n\n            runCommand(cmd, { client })\n        } else {\n            pendingData += data\n        }\n    })\n\n    client.on('close', function () {\n        console.log('[PeerService] Peer has left', client.peer)\n\n        delete local.connectedPeers[client.peer]\n\n        local.raft.leave(client.peer)\n    })\n\n    client.on('error', function (err) {\n        console.log('[PeerService] Error', err)\n    })\n}\n\nexport const peerConnect = async (peerId) => {\n    console.log('[PeerService] Connecting to', peerId)\n\n    local.connectingPeers[peerId] = true\n\n    return new Promise((resolve) => {\n        const client = local.peer.connect(peerId, {\n            label: 'chat',\n            serialization: 'none',\n            metadata: { message: 'Lets connect' }\n        })\n\n        client.on('open', () => {\n            console.log('[PeerService] Connected to', peerId)\n\n            client.open = true\n\n            delete local.connectingPeers[peerId]\n\n            local.connectedPeers[peerId] = client\n\n            if (config.RAFT_ENABLED) {\n                local.raft.join(peerId, async (cmd, cb) => {\n                    if (!cmd.key) // If no key, then this is a native raft command, so lets wrap it\n                        cmd = { key: 'raft', data: cmd }\n\n                    await sendCommand(cmd.key, cmd.data, client, null, cb)\n                })\n            }\n\n            resolve(client)\n        })\n\n        initClient(client)\n    })\n}\n\nexport const fetchPeers = async () => {\n    return new Promise((resolve) => {\n        const req = new XMLHttpRequest()\n\n        req.open('GET', 'http://' + local.peerHost + ':' + local.peerPort + '/' + local.peerKey + '/peers')\n\n        req.onload = () => {\n            const result = JSON.parse(req.response)\n\n            console.log('[PeerService] Peers found', result)\n\n            resolve(result)\n        }\n\n        req.send()\n    })\n}\n\nexport const monitorPeers = () => {\n    const check = async () => {\n        const peers = await fetchPeers()\n\n        for (let i in peers) {\n            const peerId = peers[i]\n\n            if (peerId == local.peerId) continue\n            if (local.connectedPeers[peerId]) continue\n            if (local.connectingPeers[peerId]) continue\n            \n            await peerConnect(peerId)\n        }\n\n        setTimeout(check, 2000)\n    }\n\n    check()\n}\n\nexport const init = () => {\n    console.log('[PeerService] Initializing')\n\n    ChaosMonkey.init(config.CHAOS_MONKEY_STRENGTH)\n\n    if (ChaosMonkey.random()) {\n        config.DATA_RELAYER_ENABLED = false\n    }\n\n    local.peer = new Peer({\n        host: local.peerHost,\n        port: local.peerPort,\n        secure: false,\n        key: local.peerKey,\n        debug: 3,\n        allow_discovery: true,\n        logFunction: function () {\n            var copy = Array.prototype.slice.call(arguments).join(' ')\n            console.log(copy)\n\n            if (copy == 'ERROR Error: Lost connection to server.') {\n                local.peer.disconnect()\n                setTimeout(() => local.peer.reconnect(), 200)\n            }\n        }\n    })\n\n    local.peer.on('open', (id) => {\n        console.log('[PeerService] Connected', id)\n\n        local.peerId = id\n\n        local.raft = new LifeRaft(local.peerId, {\n            'election min': 2000,\n            'election max': 4000,\n            'heartbeat min': 1000,\n            'heartbeat max': 2000,\n            'socket': null\n        })\n\n        monitorPeers()\n    })\n\n    local.peer.on('call', (call) => {\n        console.log('[PeerService] Received call', call)\n    })\n\n    local.peer.on('data', (data) => {\n        console.log('[PeerService] Received data', data)\n\n        if (data[data.length - 1] === '}') {\n            const cmd = JSON.parse(local.pendingData + data)\n\n            local.pendingData = ''\n\n            runCommand(cmd)\n        } else {\n            local.pendingData += data\n        }\n    })\n\n    local.peer.on('connection', (client) => {\n        console.log('[PeerService] New connection', client)\n\n        local.connectedPeers[client.peer] = client\n\n        initClient(client)\n    })\n\n    local.peer.on('error', (err) => {\n        console.log('[PeerService] Error', err)\n    })\n\n    window.config = config\n    window.peerConnect = peerConnect\n    window.pageContentDataRequest = pageContentDataRequest\n    window.addressBalanceRequest = addressBalanceRequest\n\n    // Make sure things clean up properly.\n    window.onunload = window.onbeforeunload = function (e) {\n        if (!!local.peer && !local.peer.destroyed) {\n            local.peer.destroy()\n        }\n    }\n\n    console.log('[PeerService] Configuration set', config)\n\n}\n"],"sourceRoot":""}
exports.up = function up (knex) {
    return knex.schema
        .createTable('users', table => {
            table.increments('userId').primary()
            table.string('username').unique()
            table.string('password').notNullable()
            table.timestamp('passwordEditedAt').nullable()
            table.boolean('enabled')
            table.json('meta')

            table.integer('createdBy')
                .unsigned()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.integer('editedBy')
                .unsigned()
                .nullable()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.integer('deletedBy')
                .unsigned()
                .nullable()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
            table.timestamp('editedAt').nullable()
            table.timestamp('deletedAt').nullable()

            table.index(['createdAt', 'editedAt'], 'mul_timestamp')
            table.index('deletedAt', 'idx_deleted_at')
        })
        .createTable('applications', table => {
            table.increments('applicationId').primary()
            table.string('name')
            table.string('logo')
            table.string('type')

            table.integer('createdBy')
                .unsigned()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.integer('editedBy')
                .unsigned()
                .nullable()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.integer('deletedBy')
                .unsigned()
                .nullable()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
            table.timestamp('editedAt').nullable()
            table.timestamp('deletedAt').nullable()

            table.index(['createdAt', 'editedAt'], 'mul_timestamp')
            table.index('deletedAt', 'idx_deleted_at')
        })
        .createTable('jobs', table => {
            table.increments('jobId').primary()
            table.integer('applicationId')
                .unsigned()
                .references('applications.applicationId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.string('type')
            table.json('lang')
            table.json('templates')

            table.integer('createdBy')
                .unsigned()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.integer('editedBy')
                .unsigned()
                .nullable()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.integer('deletedBy')
                .unsigned()
                .nullable()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
            table.timestamp('editedAt').nullable()
            table.timestamp('deletedAt').nullable()

            table.index('type', 'idx_type')
            table.index(['createdAt', 'editedAt'], 'mul_timestamp')
            table.index('deletedAt', 'idx_deleted_at')
        })
        .createTable('roles', table => {
            table.increments('roleId').primary()
            table.integer('applicationId')
                .unsigned()
                .references('applications.applicationId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.string('name')
            table.string('description')
            table.json('meta')

            table.integer('createdBy')
                .unsigned()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.integer('editedBy')
                .unsigned()
                .nullable()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.integer('deletedBy')
                .unsigned()
                .nullable()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())
            table.timestamp('editedAt').nullable()
            table.timestamp('deletedAt').nullable()

            table.index('name', 'idx_name')
            table.index(['createdAt', 'editedAt'], 'mul_timestamp')
            table.index('deletedAt', 'idx_deleted_at')
        })
        .createTable('users_roles', table => {
            table.increments('userRoleId').primary()
            table.integer('userId')
                .unsigned()
                .references('users.userId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
            table.integer('roleId')
                .unsigned()
                .references('roles.roleId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')

            table.timestamp('createdAt').notNullable().defaultTo(knex.fn.now())

            table.index(['userId', 'roleId'], 'mul_user_role')
            table.index('createdAt', 'idx_created_at')
        })
        .table('users', table => {
            table.integer('applicationId')
                .unsigned()
                .references('applications.applicationId')
                .onUpdate('SET NULL')
                .onDelete('SET NULL')
        })
}

exports.down = function down (knex) {
    return knex.schema
        .dropTable('jobs')
        .dropTable('applications')
        .dropTable('users')
        .dropTable('roles')
        .dropTable('users_roles')
}

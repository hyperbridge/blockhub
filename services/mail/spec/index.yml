openapi: 3.0.0
info:
  description: This is an API specification for Mail APIs
  version: 1.0.0
  title: Mail APIs
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: help@hyperbridge.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:7001/'
security:
- default: []
tags:
- name: job
  description: Jobs
paths:
  '/auth/register':
    post:
      summary: Register
      description: Register
      operationId: authRegister
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRegisterResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterRequest'
        required: true
  '/auth/login':
    post:
      summary: Login
      description: Login
      operationId: authLogin
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
        required: true

  '/verify':
    get:
      summary: Verify token
      description: Verify token
      operationId: verify
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRegisterResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      security:
      - default: ['auth']

  '/application':
    post:
      tags:
        - application
      summary: Creates application
      description: Creates application
      operationId: applicationCreate
      parameters:
      - name: name
        in: body
        description: name of the application to create
        required: true
        schema:
          type: string
      - name: logo
        in: body
        description: full URL of picture used for the application
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExperimentResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      security:
      - default: ['auth', 'admin']
  '/application/{applicationId}':
    get:
      tags:
        - application
      summary: Gets a specific application
      description: Gets a specific application
      operationId: applicationGet
      parameters:
      - name: applicationId
        in: path
        description: queries by application id
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExperimentResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '404':
          $ref: '#/components/responses/404_NotFound'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      security:
      - default: ['auth', 'admin']
  '/applications':
    get:
      tags:
        - application
      summary: Returns a list of all the applications
      description: Returns a list of all the applications
      operationId: applicationsGet
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExperimentResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      security:
      - default: ['auth']
  '/role':
    post:
      tags:
        - role
      summary: Creates role AB test
      description: |-
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Error Handling

        ```
        Any unmet conditions from 'Validation Requirements' will result in a 400 Validation Error

        The following will result in a 422 Unprocessable Entity Error
         -If applicationId doesn't exist
         ```
      operationId: createRole
      parameters:
      - $ref: '#/components/parameters/applicationId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoleResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
        required: true
      security:
      - default: ['auth', 'admin']
  '/role/{roleId}':
    get:
      tags:
      - role
      summary: Retrieve a role by id
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Output
        ```
        returns the related role information for specified
        role id.
        ```
      operationId: getRole
      parameters:
      - $ref: '#/components/parameters/applicationId'
      - name: roleId
        in: path
        description: queries by role id
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoleResponse'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '404':
          $ref: '#/components/responses/404_NotFound'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
    patch:
      tags:
        - role
      summary: Updates role info
      description: |-
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Error Handling

        ```
        Any unmet conditions from 'Validation Requirements' will result in a 400 Validation Error

        The following will result in a 422 Unprocessable Entity Error
         -If id doesn't exist
         -If applicationId doesn't exist
         -If id is not associated with applicationId
         ```
      operationId: updateRole
      parameters:
      - $ref: '#/components/parameters/applicationId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoleResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
        required: true
        description: |
          ```
          courses, routes, contacts should have full information regardless of their diff, if each fields exists
          ```
      security:
      - default: ['auth', 'admin']
    delete:
      tags:
      - role
      summary: Delete role
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Error handling
        ```
        The following will result in a 422 Unprocessable Entity Error
          - delete a non-existing role id
        ```
      operationId: deleteRole
      parameters:
      - $ref: '#/components/parameters/applicationId'
      - name: roleId
        in: path
        description: request by role id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoleIdResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRole'
        description: ID of Role to be deleted
        required: true
      security:
      - default: ['auth', 'admin']
  '/roles':
    get:
      tags:
      - role
      summary: Retrieve array of roles
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Output
        ```
        returns the related role information for specified
        role id.
        ```
      operationId: getRoles
      parameters:
      - $ref: '#/components/parameters/applicationId'
      - name: roleIds
        in: body
        description: queries by array of role ids
        required: false
        schema:
          type: array
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRolesResponse'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '404':
          $ref: '#/components/responses/404_NotFound'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
  '/role/search':
    post:
      tags:
      - role
      summary: Retrieve array of roles
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Output
        ```
        returns the related role information for specified
        role id.
        ```
      operationId: searchRoles
      parameters:
      - $ref: '#/components/parameters/applicationId'
      - name: roleIds
        in: body
        description: queries by array of role ids
        required: false
        schema:
          type: array
      - name: roleName
        in: body
        description: queries by role name
        required: false
        schema:
          type: string
      - name: resultMax
        in: body
        description: returns x max results
        required: false
        schema:
          type: integer
      - name: resultStartIndex
        in: body
        description: returns results starting from this index
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchRolesResponse'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '404':
          $ref: '#/components/responses/404_NotFound'
        '500':
          $ref: '#/components/responses/500_InternalServerError'


  '/user':
    post:
      tags:
        - user
      summary: Creates user AB test
      description: |-
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Error Handling

        ```
        Any unmet conditions from 'Validation Requirements' will result in a 400 Validation Error

        The following will result in a 422 Unprocessable Entity Error
         -If applicationId doesn't exist
         ```
      operationId: createUser
      parameters:
      - $ref: '#/components/parameters/applicationId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      security:
      - default: ['auth', 'admin']
  '/user/{userId}':
    get:
      tags:
      - user
      summary: Retrieve a user by id
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Output
        ```
        returns the related user information for specified
        user id.
        ```
      operationId: getUser
      parameters:
      - $ref: '#/components/parameters/applicationId'
      - name: userId
        in: path
        description: queries by user id
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '404':
          $ref: '#/components/responses/404_NotFound'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
    patch:
      tags:
        - user
      summary: Updates user info
      description: |-
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Error Handling

        ```
        Any unmet conditions from 'Validation Requirements' will result in a 400 Validation Error

        The following will result in a 422 Unprocessable Entity Error
         -If id doesn't exist
         -If applicationId doesn't exist
         -If id is not associated with applicationId
         ```
      operationId: updateUser
      parameters:
      - $ref: '#/components/parameters/applicationId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
        description: |
          ```
          courses, routes, contacts should have full information regardless of their diff, if each fields exists
          ```
      security:
      - default: ['auth', 'admin']
    delete:
      tags:
      - user
      summary: Delete user
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Error handling
        ```
        The following will result in a 422 Unprocessable Entity Error
          - delete a non-existing user id
        ```
      operationId: deleteUser
      parameters:
      - $ref: '#/components/parameters/applicationId'
      - name: userId
        in: path
        description: request by user id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserIdResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUser'
        description: ID of User to be deleted
        required: true
      security:
      - default: ['auth', 'admin']
  '/users/search':
    post:
      tags:
      - user
      summary: Retrieve array of users
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Output
        ```
        returns the users via the search parameters.
        ```
      operationId: searchUsers
      parameters:
      - $ref: '#/components/parameters/applicationId'
      - name: userIds
        in: body
        description: queries by array of user ids
        required: false
        schema:
          type: array
      - name: userName
        in: body
        description: queries by user name
        required: false
        schema:
          type: string
      - name: resultMax
        in: body
        description: returns x max results
        required: false
        schema:
          type: integer
      - name: resultStartIndex
        in: body
        description: returns results starting from this index
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchUsersResponse'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '404':
          $ref: '#/components/responses/404_NotFound'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
  '/users/permissions':
    get:
      tags:
      - user
      summary: Retrieve array of permissions
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Output
        ```
        returns the related user permissions.
        ```
      operationId: getUserPermissions
      parameters:
      - $ref: '#/components/parameters/applicationId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionsResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      security:
      - default: ['auth', 'admin']

  '/job/publish':
    post:
      tags:
      - job
      summary: Publishes current job
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Output
        ```
        ```
      operationId: publishJob
      parameters:
      - $ref: '#/components/parameters/applicationId'
      responses:
        '200':
          description: successful operation
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishJobRequest'
        required: true
      security:
      - default: ['auth', 'admin']
  '/job':
    get:
      tags:
      - job
      summary: Retrieve current job
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Output
        ```
        returns the related job information for current job.
        ```
      operationId: getJob
      parameters:
      - $ref: '#/components/parameters/applicationId'
      - name: jobId
        in: path
        description: queries by job id
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJobResponse'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '404':
          $ref: '#/components/responses/404_NotFound'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
    post:
      tags:
        - job
      summary: Creates job
      description: |-
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Error Handling

        ```
        Any unmet conditions from 'Validation Requirements' will result in a 400 Validation Error

        The following will result in a 422 Unprocessable Entity Error
         -If applicationId doesn't exist
         ```
      operationId: createJob
      parameters:
      - $ref: '#/components/parameters/applicationId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJobResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
        required: true
      security:
      - default: ['auth', 'admin']
  '/job/{jobId}':
    get:
      tags:
      - job
      summary: Retrieve a job by id
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Output
        ```
        returns the related job information for specified
        job id.
        ```
      operationId: getJob
      parameters:
      - $ref: '#/components/parameters/applicationId'
      - name: jobId
        in: path
        description: queries by job id
        required: false
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJobResponse'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '404':
          $ref: '#/components/responses/404_NotFound'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
    patch:
      tags:
        - job
      summary: Updates job info
      description: |-
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Error Handling

        ```
        Any unmet conditions from 'Validation Requirements' will result in a 400 Validation Error

        The following will result in a 422 Unprocessable Entity Error
         -If id doesn't exist
         -If applicationId doesn't exist
         -If id is not associated with applicationId
         ```
      operationId: updateJob
      parameters:
      - $ref: '#/components/parameters/applicationId'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJobResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '403':
          $ref: '#/components/responses/403_Forbidden'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateJobRequest'
        required: true
        description: |
          ```
          courses, routes, contacts should have full information regardless of their diff, if each fields exists
          ```
      security:
      - default: ['auth', 'admin']
    delete:
      tags:
      - job
      summary: Delete job
      description: |
        ### Authentication requirement (if failed 401 error will be returned)
        ```
          Login
        ```

        ### Error handling
        ```
        The following will result in a 422 Unprocessable Entity Error
          - delete a non-existing job id
        ```
      operationId: deleteJob
      parameters:
      - $ref: '#/components/parameters/applicationId'
      - name: jobId
        in: path
        description: request by job id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJobIdResponse'
        '400':
          $ref: '#/components/responses/400_ValidationError'
        '401':
          $ref: '#/components/responses/401_UnauthorizedError'
        '422':
          $ref: '#/components/responses/422_UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_Maintenance'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteJob'
        description: ID of Job to be deleted
        required: true
      security:
      - default: ['auth', 'admin']
components:
  parameters:
    applicationId:
      name: applicationId
      in: header
      description: queries by application id
      required: true
      schema:
        type: string
        format: uuid
  responses:
    400_ValidationError:
      description: |
        Validation Error.
        Some specified fields were invalid.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  example: XXX_id
                errorCode:
                  type: integer
                  example: 4031
                message:
                  type: string
                  example: XXX id must be integer
    401_UnauthorizedError:
      description: Unauthorized Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
    403_Forbidden:
      description: Forbidden Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Forbidden
    404_NotFound:
      description: Not Found Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Not Found
    422_UnprocessableEntity:
      description: |
        Unprocessable Entity.
        Data has something wrong logically.
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                errorCode:
                  type: string
                  example: null
                message:
                  type: string
                  example: ''
                messageAttributes:
                  type: array
                  example: []
                  items:
                    type: string
    500_InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Internal Server Error
    503_Maintenance:
      description: Service Unavailable (Maintenance mode)
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Service Unavailable
  schemas:
    AuthLoginRequest:
      type: object
      properties:
        username:
          type: string
          example: myusername
          maximum: 100
        password:
          type: string
          example: mypassword
          maximum: 100
      required:
        - username
        - password
    AuthLoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJrZXZpbiIsImlhdCI6MTU1NDI3NTMxNzM2
        data:
          type: object
          properties:
            username:
              type: string
              example: myusername
            createdAt:
              type: integer
              example: 1554273439983
            editedAt:
              type: integer
              example: 1554273439983
            passwordEditedAt:
              type: integer
              example: 1554273439983
      required:
        - message
        - token
        - user
    AuthRegisterRequest:
      type: object
      properties:
        username:
          type: string
          example: myusername
          maximum: 100
        password:
          type: string
          example: mypassword
          maximum: 100
      required:
        - username
        - password
    AuthRegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: The account was created successfully
      required:
        - status
        - message
    SearchRolesResponse:
      type: object
      properties:
        pagination:
          type: object
          properties:
            startIndex:
              type: integer
              example: 0
            total:
              type: integer
              example: 10
        data:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    SearchUsersResponse:
      type: object
      properties:
        pagination:
          type: object
          properties:
            startIndex:
              type: integer
              example: 0
            total:
              type: integer
              example: 10
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    UserPermissionsResponse:
      type: array
      items:
        type: string
        example: application.read
    User:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        username:
          type: string
          example: My Name
          maximum: 100
    GetUserResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'
    CreateUserRequest:
      type: object
      $ref: '#/components/schemas/User'
      required:
        - username
    UpdateUserRequest:
      type: object
      $ref: '#/components/schemas/User'
    GetUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    DeleteUser:
      type: integer
      example: 1
    GetUserIdResponse:
      type: object
      properties:
        data:
          type: string
    Role:
      type: object
      properties:
        roleId:
          type: integer
          example: 1
        name:
          type: string
          example: My Name
          maximum: 100
        description:
          type: string
          example: This is my description
          maximum: 500
    GetRoleResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Role'
    CreateRoleRequest:
      type: object
      $ref: '#/components/schemas/Role'
      required:
        - key
        - name
        - description
    UpdateRoleRequest:
      type: object
      $ref: '#/components/schemas/Role'
    GetRolesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Role'
    DeleteRole:
      type: integer
      example: 1
    GetRoleIdResponse:
      type: object
      properties:
        data:
          type: string
    JobHistory:
      type: object
      properties:
        type:
          type: string
          example: job_published_version_list
          maximum: 100
        versions:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 85c9ba8a-7b8e-4739-9083-7c23a231d972
              createdAt:
                type: string
                example: 1554273439983
    Job:
      type: object
      properties:
        type:
          type: string
          example: job
          maximum: 100
        lang:
          type: string
          example: en
          maximum: 10
          enum: ['en', 'jp', 'zh']
        templates:
          type: array
          items:
            $ref: '#/components/schemas/Template'
    GetJobResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Job'
    CreateJobRequest:
      type: object
      $ref: '#/components/schemas/Job'
      required:
        - type
        - lang
        - templates
    UpdateJobRequest:
      type: object
      $ref: '#/components/schemas/Job'
      required:
        - type
        - lang
        - templates
    GetJobsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Job'
    DeleteJob:
      type: integer
      example: 1
    GetJobIdResponse:
      type: object
      properties:
        data:
          type: integer
          example: 1
  securitySchemes:
    default:
      type: http
      description: Authorization via header required
      name: authorization
      in: header
